import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('telecom_users.csv')

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = data.replace({'Yes': 1, 'No': 0})
data['SeniorCitizen'] = data['SeniorCitizen'].astype(int)
data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce').fillna(0)
data.fillna(0, inplace=True)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
encoder = LabelEncoder()
categorical_features = ['gender', 'Dependents', 'Contract', 'PhoneService', 'InternetService', 'StreamingTV', 'StreamingMovies']
for col in categorical_features:
    data[col] = encoder.fit_transform(data[col].astype(str))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features = ['gender', 'SeniorCitizen', 'Dependents', 'Contract', 'tenure', 'PhoneService', 
            'InternetService', 'StreamingTV', 'StreamingMovies', 'MonthlyCharges']

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X = pd.DataFrame(scaler.fit_transform(data[features]), columns=features)

# –ü–µ—Ä–µ–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
data['Churn'] = data['Churn'].map({'Yes': 1, 'No': 0}).fillna(0).astype(int)
y = data['Churn']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ CatBoost
cat_features = ['gender', 'Dependents', 'Contract', 'PhoneService', 'InternetService', 'StreamingTV', 'StreamingMovies']
model = CatBoostClassifier(iterations=1000, depth=6, learning_rate=0.1, loss_function='Logloss', cat_features=cat_features, verbose=200)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.set_page_config(page_title='–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', layout='wide')
st.title('üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
st.write('üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
st.subheader('–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏')
st.write(f'–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy * 100:.2f}%')




# –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö
st.subheader('–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö')
st.write(data.head())

# –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
st.subheader('–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
st.write(input_data)

# Churn ‚Äì –¥–æ–ª—è –æ—Ç—Ç–æ–∫ –∏ –Ω–µ –æ—Ç—Ç–æ–∫
plt.figure(figsize=(6, 4))
sns.countplot(x='Churn', data=data, palette='coolwarm', hue='Churn')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
plt.xlabel('–û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="Churn", labels=["–ù–µ –æ—Ç—Ç–æ–∫ (0)", "–û—Ç—Ç–æ–∫ (1)"], loc="upper right")
st.pyplot(plt)

# –î–æ–ª—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –∏ –Ω–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤
plt.figure(figsize=(6, 4))
sns.countplot(x='SeniorCitizen', data=data, hue='SeniorCitizen', palette='coolwarm', legend=False)
plt.title('–î–æ–ª—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –∏ –Ω–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤')
plt.xlabel('–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="SeniorCitizen", labels=["–ù–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä (0)", "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä (1)"], loc="upper right")
st.pyplot(plt)

# –î–æ–ª—è –∂–µ–Ω—Å–∫–∏—Ö –∏ –º—É–∂—Å–∫–∏—Ö –ø–æ–ª–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
plt.figure(figsize=(6, 4))
sns.countplot(x='gender', data=data, hue='gender', palette='coolwarm', legend=False)
plt.title('–î–æ–ª—è –∂–µ–Ω—Å–∫–∏—Ö –∏ –º—É–∂—Å–∫–∏—Ö –ø–æ–ª–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')
plt.xlabel('–ü–æ–ª')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="Gender", labels=["–ñ–µ–Ω—Å–∫–∏–π (0)", "–ú—É–∂—Å–∫–æ–π (1)"], loc="upper right")
st.pyplot(plt)

# –î–æ–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ –æ–±—â–µ–π —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
plt.figure(figsize=(6, 6))
sns.boxplot(data=data[['MonthlyCharges', 'TotalCharges']], palette=["skyblue", "orange"])
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤')
plt.xlabel('–¢–∏–ø –æ–ø–ª–∞—Ç—ã')
plt.ylabel('–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã')
plt.xticks(ticks=[0, 1], labels=['–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞', '–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã'])
st.pyplot(plt)

# –î–æ–ª—è PhoneService –∏ InternetService 
phone_internet_data = data[['PhoneService', 'InternetService']].apply(pd.Series.value_counts, normalize=True).T
plt.figure(figsize=(6, 4))
phone_internet_data.plot(kind='bar', stacked=True, color=['skyblue', 'orange'], edgecolor='black')
plt.title('–î–æ–ª—è PhoneService –∏ InternetService')
plt.xlabel('–¢–∏–ø —É—Å–ª—É–≥–∏')
plt.ylabel('–î–æ–ª—è')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="–¢–∏–ø —É—Å–ª—É–≥–∏", labels=["PhoneService", "InternetService"], loc="upper right")
st.pyplot(plt)

# –¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
plt.figure(figsize=(6, 4))
sns.countplot(x='Contract', data=data, hue='Contract', palette='coolwarm', legend=False)
plt.title('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞')
plt.xlabel('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="Contract", labels=["Month-to-month", "One year", "Two year"], loc="upper right")
st.pyplot(plt)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
#st.subheader('–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏')
#st.write(f'–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy * 100:.2f}%')

# –ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã
st.subheader('–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã')
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["–ù–µ –æ—Ç—Ç–æ–∫", "–û—Ç—Ç–æ–∫"], yticklabels=["–ù–µ –æ—Ç—Ç–æ–∫", "–û—Ç—Ç–æ–∫"])
plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π")
plt.ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–π")
st.pyplot(plt)
