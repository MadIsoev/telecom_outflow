import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('telecom_users.csv')

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = data.replace({'Yes': 1, 'No': 0})
data['SeniorCitizen'] = data['SeniorCitizen'].astype(int)
data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce').fillna(0)
data.fillna(0, inplace=True)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
encoder = LabelEncoder()
categorical_features = ['gender', 'Dependents', 'Contract', 'PhoneService', 'InternetService', 'StreamingTV', 'StreamingMovies']
for col in categorical_features:
    data[col] = encoder.fit_transform(data[col].astype(str))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –∏ –∫–æ–¥–∏—Ä—É–µ–º

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features = ['gender', 'SeniorCitizen', 'Dependents', 'Contract', 'tenure', 'PhoneService', 
            'InternetService', 'StreamingTV', 'StreamingMovies', 'MonthlyCharges']

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X = pd.DataFrame(scaler.fit_transform(data[features]), columns=features)

# –ü–µ—Ä–µ–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
data['Churn'] = data['Churn'].map({'Yes': 1, 'No': 0}).fillna(0).astype(int)
y = data['Churn']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.set_page_config(page_title='–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', layout='wide')
st.title('üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
st.write('üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
with st.sidebar:
    st.header("üîß –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: ")

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ "Yes" –∏–ª–∏ "No" –∑–Ω–∞—á–µ–Ω–∏–π
    gender = st.selectbox('–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞', ['male', 'female'], index=0)
    SeniorCitizen = st.selectbox('–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä?', ['Yes', 'No'], index=1)
    Dependents = st.selectbox('–ï—Å—Ç—å –ª–∏ –∏–∂–¥–∏–≤–µ–Ω—Ü—ã?', ['Yes', 'No'], index=1)
    PhoneService = st.selectbox('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏?', ['Yes', 'No'], index=0)

    Contract_options = ['Month-to-month', 'One year', 'Two year']
    Contract = st.selectbox('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', Contract_options, index=0)

    tenure = st.slider('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–º–µ—Å—è—Ü—ã)', min_value=int(data['tenure'].min()), max_value=int(data['tenure'].max()), value=int(data['tenure'].mean()))

    InternetService_options = ['DSL', 'Fiber optic', 'No']
    InternetService = st.selectbox('–¢–∏–ø –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—É—Å–ª—É–≥–∏', InternetService_options, index=0)

    StreamingTV_options = ['Yes', 'No', 'No internet service']
    StreamingTV = st.selectbox('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏—è?', StreamingTV_options, index=0)

    StreamingMovies_options = ['Yes', 'No', 'No internet service']
    StreamingMovies = st.selectbox('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞?', StreamingMovies_options, index=0)

    MonthlyCharges = st.slider('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', min_value=float(data['MonthlyCharges'].min()), max_value=float(data['MonthlyCharges'].max()), value=float(data['MonthlyCharges'].mean()))

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
input_data = pd.DataFrame({
    'gender': [1 if gender == 'male' else 0],
    'SeniorCitizen': [1 if SeniorCitizen == 'Yes' else 0],
    'Dependents': [1 if Dependents == 'Yes' else 0],
    'Contract': [Contract_options.index(Contract)],
    'tenure': [tenure],
    'PhoneService': [1 if PhoneService == 'Yes' else 0],
    'InternetService': [InternetService_options.index(InternetService)],
    'StreamingTV': [StreamingTV_options.index(StreamingTV)],
    'StreamingMovies': [StreamingMovies_options.index(StreamingMovies)],
    'MonthlyCharges': [MonthlyCharges]
})

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
input_data_scaled = scaler.transform(input_data)

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
prediction = model.predict(input_data_scaled)
prediction_prob = model.predict_proba(input_data_scaled)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞
if prediction_prob.shape[1] == 2:
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞
    probability_of_churn = prediction_prob[0][1]
else:
    probability_of_churn = None  # –ï—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞ –Ω–µ—Ç, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º None

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
st.subheader("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
if prediction == 1:
    st.error("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–π–¥—ë—Ç.")
else:
    st.success("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.")

# –ï—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞
if probability_of_churn is not None:
    st.write(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: {probability_of_churn * 100:.2f}%')
else:
    st.warning('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞.')

# –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö
st.subheader('–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö')
st.write(data.head())

# –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
st.subheader('–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
st.write(input_data)

# Churn ‚Äì –¥–æ–ª—è –æ—Ç—Ç–æ–∫ –∏ –Ω–µ –æ—Ç—Ç–æ–∫
plt.figure(figsize=(6, 4))
sns.countplot(x='Churn', data=data, palette='coolwarm', hue='Churn')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
plt.xlabel('–û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="Churn", labels=["–ù–µ –æ—Ç—Ç–æ–∫ (0)", "–û—Ç—Ç–æ–∫ (1)"], loc="upper right")
st.pyplot(plt)

# –î–æ–ª—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –∏ –Ω–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤
plt.figure(figsize=(6, 4))
sns.countplot(x='SeniorCitizen', data=data, hue='SeniorCitizen', palette='coolwarm', legend=False)
plt.title('–î–æ–ª—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –∏ –Ω–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤')
plt.xlabel('–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="SeniorCitizen", labels=["–ù–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä (0)", "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä (1)"], loc="upper right")
st.pyplot(plt)

# –î–æ–ª—è –∂–µ–Ω—Å–∫–∏—Ö –∏ –º—É–∂—Å–∫–∏—Ö –ø–æ–ª–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
plt.figure(figsize=(6, 4))
sns.countplot(x='gender', data=data, hue='gender', palette='coolwarm', legend=False)
plt.title('–î–æ–ª—è –∂–µ–Ω—Å–∫–∏—Ö –∏ –º—É–∂—Å–∫–∏—Ö –ø–æ–ª–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')
plt.xlabel('–ü–æ–ª')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="Gender", labels=["–ñ–µ–Ω—Å–∫–∏–π (0)", "–ú—É–∂—Å–∫–æ–π (1)"], loc="upper right")
st.pyplot(plt)

# –ì—Ä–∞—Ñ–∏–∫: –î–æ–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ –æ–±—â–µ–π —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
plt.figure(figsize=(6, 6))
sns.boxplot(data=data[['MonthlyCharges', 'TotalCharges']], palette=["skyblue", "orange"])
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤')
plt.xlabel('–¢–∏–ø –æ–ø–ª–∞—Ç—ã')
plt.ylabel('–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã')
plt.xticks(ticks=[0, 1], labels=['–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞', '–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã'])
st.pyplot(plt)

# –î–æ–ª—è PhoneService –∏ InternetService –≤ –æ–¥–Ω–æ–º –≥–∏—Å—Ç–∞–≥—Ä–∞–º–º–µ
phone_internet_data = data[['PhoneService', 'InternetService']].apply(pd.Series.value_counts, normalize=True).T
plt.figure(figsize=(6, 4))
phone_internet_data.plot(kind='bar', stacked=True, color=['skyblue', 'orange'], edgecolor='black')
plt.title('–î–æ–ª—è PhoneService –∏ InternetService')
plt.xlabel('–¢–∏–ø —É—Å–ª—É–≥–∏')
plt.ylabel('–î–æ–ª—è')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="–¢–∏–ø —É—Å–ª—É–≥–∏", labels=["PhoneService", "InternetService"], loc="upper right")
st.pyplot(plt)

# Contract ‚Äì —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
plt.figure(figsize=(6, 4))
sns.countplot(x='Contract', data=data, hue='Contract', palette='coolwarm', legend=False)
plt.title('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞')
plt.xlabel('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
# –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
plt.legend(title="Contract", labels=["Month-to-month", "One year", "Two year"], loc="upper right")
st.pyplot(plt)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
st.subheader('–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏')
st.write(f'–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy * 100:.2f}%')

#  –ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã
st.subheader('–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã')
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["–ù–µ –æ—Ç—Ç–æ–∫", "–û—Ç—Ç–æ–∫"], yticklabels=["–ù–µ –æ—Ç—Ç–æ–∫", "–û—Ç—Ç–æ–∫"])
plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π")
plt.ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–π")
st.pyplot(plt)

#  –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
st.subheader('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏')
st.text(classification_report(y_test, y_pred))

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
sns.set_style("whitegrid")
plt.rcParams.update({'figure.figsize': (8, 5), 'axes.titlesize': 14, 'axes.labelsize': 12})

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
fig, ax = plt.subplots()
sns.countplot(x='Churn', data=data, palette='coolwarm', ax=ax)
ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
ax.set_xlabel('–û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤')
ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
ax.set_xticklabels(['–ù–µ –æ—Ç—Ç–æ–∫ (0)', '–û—Ç—Ç–æ–∫ (1)'])
st.pyplot(fig)

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤
fig, ax = plt.subplots()
sns.countplot(x='SeniorCitizen', data=data, palette='coolwarm', ax=ax)
ax.set_title('–î–æ–ª—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –∏ –Ω–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤')
ax.set_xlabel('–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã')
ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
ax.set_xticklabels(['–ù–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä (0)', '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä (1)'])
st.pyplot(fig)

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª–∞
fig, ax = plt.subplots()
sns.countplot(x='gender', data=data, palette='coolwarm', ax=ax)
ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É')
ax.set_xlabel('–ü–æ–ª')
ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
ax.set_xticklabels(['–ñ–µ–Ω—Å–∫–∏–π (0)', '–ú—É–∂—Å–∫–æ–π (1)'])
st.pyplot(fig)

# Boxplot –æ–ø–ª–∞—Ç—ã
fig, ax = plt.subplots()
sns.boxplot(data=data[['MonthlyCharges', 'TotalCharges']], palette=["skyblue", "orange"], ax=ax)
ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π')
ax.set_xticklabels(['–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞', '–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã'])
ax.set_ylabel('–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã')
st.pyplot(fig)

# –î–æ–ª—è PhoneService –∏ InternetService
fig, ax = plt.subplots()
phone_internet_data = data[['PhoneService', 'InternetService']].apply(pd.Series.value_counts, normalize=True).T
phone_internet_data.plot(kind='bar', stacked=True, color=['skyblue', 'orange'], edgecolor='black', ax=ax)
ax.set_title('–î–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π PhoneService –∏ InternetService')
ax.set_xlabel('–¢–∏–ø —É—Å–ª—É–≥–∏')
ax.set_ylabel('–î–æ–ª—è')
st.pyplot(fig)

# –¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
fig, ax = plt.subplots()
sns.countplot(x='Contract', data=data, palette='coolwarm', order=['Month-to-month', 'One year', 'Two year'], ax=ax)
ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤')
ax.set_xlabel('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')
ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
st.pyplot(fig)

# –ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã
from sklearn.metrics import confusion_matrix
fig, ax = plt.subplots()
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["–ù–µ –æ—Ç—Ç–æ–∫", "–û—Ç—Ç–æ–∫"], yticklabels=["–ù–µ –æ—Ç—Ç–æ–∫", "–û—Ç—Ç–æ–∫"], ax=ax)
ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã')
ax.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π")
ax.set_ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–π")
st.pyplot(fig)
