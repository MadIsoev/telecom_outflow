import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('telecom_users.csv')

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = data.replace({'Yes': 1, 'No': 0})
data['SeniorCitizen'] = data['SeniorCitizen'].astype(int)
data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce').fillna(0)
data.fillna(0, inplace=True)

# –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
categorical_features = ['gender', 'Dependents', 'Contract', 'PhoneService', 'InternetService', 'StreamingTV', 'StreamingMovies']
numerical_features = ['SeniorCitizen', 'tenure', 'MonthlyCharges']

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(drop='first', sparse_output=False), categorical_features)
    ]
)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X = data[categorical_features + numerical_features]
y = data['Churn'].map({'Yes': 1, 'No': 0}).fillna(0).astype(int)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1))
])

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.set_page_config(page_title='–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', layout='wide')
st.title('üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
st.write('üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
with st.sidebar:
    st.header("üîß –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: ")

    gender = st.selectbox('–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞', ['male', 'female'], index=0)
    SeniorCitizen = st.selectbox('–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä?', ['Yes', 'No'], index=1)
    Dependents = st.selectbox('–ï—Å—Ç—å –ª–∏ –∏–∂–¥–∏–≤–µ–Ω—Ü—ã?', ['Yes', 'No'], index=1)
    PhoneService = st.selectbox('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏?', ['Yes', 'No'], index=0)

    Contract_options = ['Month-to-month', 'One year', 'Two year']
    Contract = st.selectbox('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', Contract_options, index=0)

    tenure = st.slider('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–º–µ—Å—è—Ü—ã)', min_value=int(data['tenure'].min()), max_value=int(data['tenure'].max()), value=int(data['tenure'].mean()))

    InternetService_options = ['DSL', 'Fiber optic', 'No']
    InternetService = st.selectbox('–¢–∏–ø –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—É—Å–ª—É–≥–∏', InternetService_options, index=0)

    StreamingTV_options = ['Yes', 'No', 'No internet service']
    StreamingTV = st.selectbox('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏—è?', StreamingTV_options, index=0)

    StreamingMovies_options = ['Yes', 'No', 'No internet service']
    StreamingMovies = st.selectbox('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞?', StreamingMovies_options, index=0)

    MonthlyCharges = st.slider('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', min_value=float(data['MonthlyCharges'].min()), max_value=float(data['MonthlyCharges'].max()), value=float(data['MonthlyCharges'].mean()))

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
input_data = pd.DataFrame({
    'gender': [gender],
    'SeniorCitizen': [1 if SeniorCitizen == 'Yes' else 0],
    'Dependents': [Dependents],
    'Contract': [Contract],
    'tenure': [tenure],
    'PhoneService': [PhoneService],
    'InternetService': [InternetService],
    'StreamingTV': [StreamingTV],
    'StreamingMovies': [StreamingMovies],
    'MonthlyCharges': [MonthlyCharges]
})

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
prediction = model.predict(input_data)
prediction_prob = model.predict_proba(input_data)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
st.subheader("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
if prediction[0] == 1:
    st.error("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–π–¥—ë—Ç.")
else:
    st.success("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.")

st.write(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: {prediction_prob[0][1] * 100:.2f}%')

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
st.subheader('–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏')
st.write(f'–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy * 100:.2f}%')

# –ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã
st.subheader('–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã')
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["–ù–µ –æ—Ç—Ç–æ–∫", "–û—Ç—Ç–æ–∫"], yticklabels=["–ù–µ –æ—Ç—Ç–æ–∫", "–û—Ç—Ç–æ–∫"])
plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π")
plt.ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–π")
st.pyplot(plt)

#  –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
st.subheader('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏')
st.text(classification_report(y_test, y_pred))
