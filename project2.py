import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('telecom_users.csv')

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = data.replace({'Yes': 1, 'No': 0})
data['SeniorCitizen'] = data['SeniorCitizen'].astype(int)
data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce').fillna(0)
data.fillna(0, inplace=True)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
encoder = LabelEncoder()
categorical_features = ['gender', 'Dependents', 'Contract', 'PhoneService', 'InternetService', 'StreamingTV', 'StreamingMovies']
for col in categorical_features:
    data[col] = encoder.fit_transform(data[col].astype(str))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –∏ –∫–æ–¥–∏—Ä—É–µ–º

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features = ['gender', 'SeniorCitizen', 'Dependents', 'Contract', 'tenure', 'PhoneService', 
            'InternetService', 'StreamingTV', 'StreamingMovies', 'MonthlyCharges']

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X = pd.DataFrame(scaler.fit_transform(data[features]), columns=features)

# –ü–µ—Ä–µ–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
data['Churn'] = data['Churn'].map({'Yes': 1, 'No': 0}).fillna(0).astype(int)
y = data['Churn']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.set_page_config(page_title='–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', layout='wide')
st.title('üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
st.write('üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
with st.sidebar:
    st.header("üîß –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: ")
    
    # –ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞ (gender)
    gender = st.radio('–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞', ['male', 'female'], index=0)
    
    # –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä (SeniorCitizen)
    SeniorCitizen = st.radio('–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä?', ['Yes', 'No'], index=1)
    
    # –ù–∞–ª–∏—á–∏–µ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤ (Dependents)
    Dependents = st.radio('–ï—Å—Ç—å –ª–∏ –∏–∂–¥–∏–≤–µ–Ω—Ü—ã?', ['Yes', 'No'], index=1)
    
    # –¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (Contract)
    Contract_options = ['Month-to-month', 'One year', 'Two year']
    Contract = st.selectbox('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', Contract_options, index=0)
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (tenure)
    tenure = st.slider('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–º–µ—Å—è—Ü—ã)', min_value=int(data['tenure'].min()), max_value=int(data['tenure'].max()), value=int(data['tenure'].mean()))
    
    # –°–µ—Ä–≤–∏—Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏ (PhoneService)
    PhoneService = st.radio('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏?', ['Yes', 'No'], index=0)
    
    # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä (InternetService)
    InternetService_options = ['DSL', 'Fiber optic', 'No']
    InternetService = st.selectbox('–¢–∏–ø –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—É—Å–ª—É–≥–∏', InternetService_options, index=0)
    
    # –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–µ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ (StreamingTV)
    StreamingTV_options = ['Yes', 'No', 'No internet service']
    StreamingTV = st.selectbox('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏—è?', StreamingTV_options, index=0)
    
    # –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–µ –∫–∏–Ω–æ (StreamingMovies)
    StreamingMovies_options = ['Yes', 'No', 'No internet service']
    StreamingMovies = st.selectbox('–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞?', StreamingMovies_options, index=0)
    
    # –ú–µ—Å—è—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–ø–ª–∞—Ç—ã (MonthlyCharges)
    MonthlyCharges = st.slider('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', min_value=float(data['MonthlyCharges'].min()), max_value=float(data['MonthlyCharges'].max()), value=float(data['MonthlyCharges'].mean()))

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
input_data = pd.DataFrame({
    'gender': [1 if gender == 'male' else 0],
    'SeniorCitizen': [1 if SeniorCitizen == 'Yes' else 0],
    'Dependents': [1 if Dependents == 'Yes' else 0],
    'Contract': [Contract_options.index(Contract)],
    'tenure': [tenure],
    'PhoneService': [1 if PhoneService == 'Yes' else 0],
    'InternetService': [InternetService_options.index(InternetService)],
    'StreamingTV': [StreamingTV_options.index(StreamingTV)],
    'StreamingMovies': [StreamingMovies_options.index(StreamingMovies)],
    'MonthlyCharges': [MonthlyCharges]
})

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ 
