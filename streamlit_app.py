import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score, roc_auc_score, classification_report

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title='–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', layout='wide')
st.title('üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
st.write('üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('telecom_users.csv')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce')
data['TotalCharges'].fillna(data['TotalCharges'].median(), inplace=True)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
label_cols = ['gender', 'Partner', 'Dependents', 'PhoneService', 'PaperlessBilling', 'Churn']
ohe_cols = ['MultipleLines', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaymentMethod']
target_cols = ['InternetService']

# –ü—Ä–∏–º–µ–Ω—è–µ–º `fit` –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 'PhoneService', 'Contract', 'PaymentMethod'
le = LabelEncoder()

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
data['PhoneService'] = le.fit_transform(data['PhoneService'])
data['Contract'] = le.fit_transform(data['Contract'])
data['PaymentMethod'] = le.fit_transform(data['PaymentMethod'])
data['InternetService'] = le.fit_transform(data['InternetService'])

# One-hot –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
data = pd.get_dummies(data, columns=ohe_cols, drop_first=True)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ–≤—ã–µ
data = data.apply(pd.to_numeric, errors='coerce')

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X = data.drop(columns=['Churn'])
y = data['Churn']

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X = pd.DataFrame(X_scaled, columns=X.columns)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è CatBoost (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)
cat_features = ['PhoneService', 'Contract', 'PaymentMethod', 'InternetService']

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
cat_feature_indices = [X.columns.get_loc(col) for col in cat_features]

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ CatBoost
clf = CatBoostClassifier(iterations=500, depth=6, learning_rate=0.1, cat_features=cat_feature_indices, verbose=0)
clf.fit(X_train, y_train)

# –ü—Ä–æ–≥–Ω–æ–∑—ã
y_pred = clf.predict(X_test)
y_prob = clf.predict_proba(X_test)[:, 1]

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
accuracy = accuracy_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_prob)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏
st.subheader('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏')
st.metric(label='–¢–æ—á–Ω–æ—Å—Ç—å', value=f"{accuracy:.4f}")
st.metric(label='ROC AUC', value=f"{roc_auc:.4f}")

# –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
st.subheader('üìå –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏')
st.write(pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).transpose())

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
import seaborn as sns
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(10, 6))
sns.heatmap(data.corr(), annot=False, cmap='coolwarm', linewidths=0.5)
st.pyplot(fig)

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.header("üîß –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: ")
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (tenure)
    tenure = st.slider('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', min_value=int(data['tenure'].min()), max_value=int(data['tenure'].max()), value=int(data['tenure'].mean()))
    
    # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (MonthlyCharges)
    MonthlyCharges = st.slider('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', min_value=float(data['MonthlyCharges'].min()), max_value=float(data['MonthlyCharges'].max()), value=float(data['MonthlyCharges'].mean()))
    
    # –¢–∏–ø –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—É—Å–ª—É–≥–∏ (InternetService)
    InternetService_options = ['DSL', 'Fiber optic', 'No']
    InternetService = st.selectbox('–¢–∏–ø –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—É—Å–ª—É–≥–∏', InternetService_options, index=InternetService_options.index('DSL'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–æ 'DSL'
    
    # –û–±—â–∞—è —Å—É–º–º–∞ (TotalCharges)
    TotalCharges = st.slider('–û–±—â–∞—è —Å—É–º–º–∞', min_value=float(data['TotalCharges'].min()), max_value=float(data['TotalCharges'].max()), value=float(data['TotalCharges'].mean()))
    
    # –°–µ—Ä–≤–∏—Å (PhoneService)
    PhoneService_options = ['Yes', 'No']
    PhoneService = st.selectbox('–°–µ—Ä–≤–∏—Å', PhoneService_options, index=PhoneService_options.index('Yes'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–æ 'Yes'
    
    # –¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (Contract)
    Contract_options = ['Month-to-month', 'One year', 'Two year']
    Contract = st.selectbox('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', Contract_options, index=Contract_options.index('Month-to-month'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–æ 'Month-to-month'
    
    # –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã (PaymentMethod)
    PaymentMethod_options = ['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)']
    PaymentMethod = st.selectbox('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã', PaymentMethod_options, index=PaymentMethod_options.index('Electronic check'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–æ 'Electronic check'

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
input_data = {
    'tenure': tenure,
    'MonthlyCharges': MonthlyCharges,
    'InternetService': InternetService,
    'TotalCharges': TotalCharges,
    'PhoneService': PhoneService,
    'Contract': Contract,
    'PaymentMethod': PaymentMethod
}

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
input_df = pd.DataFrame([input_data])

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –ø–æ–º–æ—â—å—é LabelEncoder
input_df['PhoneService'] = le.transform(input_df['PhoneService'])
input_df['Contract'] = le.transform(input_df['Contract'])
input_df['PaymentMethod'] = le.transform(input_df['PaymentMethod'])
input_df['InternetService'] = le.transform(input_df['InternetService'])

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
input_df_scaled = scaler.transform(input_df)

# –ü—Ä–æ–≥–Ω–æ–∑
input_prediction = clf.predict(input_df_scaled)
input_proba = clf.predict_proba(input_df_scaled)[:, 1]

# –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
st.subheader("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
if input_prediction == 1:
    st.error("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–π–¥—ë—Ç.")
else:
    st.success("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.")
st.write(f"üîç –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: {input_proba[0]:.2f}")
