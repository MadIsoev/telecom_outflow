import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score, roc_auc_score, classification_report
from category_encoders import TargetEncoder

st.title('üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
st.write('–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('telecom_users.csv')

# –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö
with st.expander('üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö'):
    st.write("**–î–∞–Ω–Ω—ã–µ**")
    st.dataframe(data.head())

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 'TotalCharges' –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce')
data['TotalCharges'].fillna(data['TotalCharges'].median(), inplace=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
if data.isnull().sum().any():
    st.write("–í –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
else:
    st.write("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
cat_features = ['gender', 'Partner', 'Dependents', 'PhoneService', 'PaperlessBilling', 'InternetService']
ohe_cols = ['MultipleLines', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 
            'StreamingTV', 'StreamingMovies', 'Contract', 'PaymentMethod']
target_cols = ['InternetService']
num_features = [col for col in data.columns if col not in cat_features + ohe_cols + ['Churn']]

# Label Encoding
le = LabelEncoder()
for col in cat_features:
    data[col] = le.fit_transform(data[col])

# One-Hot Encoding
data = pd.get_dummies(data, columns=ohe_cols, drop_first=True)

# Target Encoding
te = TargetEncoder(cols=target_cols)
data[target_cols] = te.fit_transform(data[target_cols], data['Churn'])

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
scaler = StandardScaler()
data[num_features] = scaler.fit_transform(data[num_features])

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X = data.drop(columns=['Churn'])
y = data['Churn']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ CatBoost
clf = CatBoostClassifier(iterations=500, depth=6, learning_rate=0.1, cat_features=cat_features, verbose=0)
clf.fit(X_train, y_train)

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
y_pred = clf.predict(X_test)
y_prob = clf.predict_proba(X_test)[:, 1]

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
accuracy = accuracy_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_prob)
st.subheader('üîÆ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
st.write(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.4f}")
st.write(f"ROC AUC: {roc_auc:.4f}")

# –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
report = classification_report(y_test, y_pred, output_dict=True)
st.subheader("üìä –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
st.write(pd.DataFrame(report).transpose())

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
fig, ax = plt.subplots(figsize=(10, 6))
sns.heatmap(data.corr(), annot=False, cmap='coolwarm', linewidths=0.5)
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
st.pyplot(fig)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—Ç–æ–∫–∞
fig1 = px.histogram(data, x="Churn", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
st.plotly_chart(fig1)

# –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
importances = clf.get_feature_importance()
feature_importances = pd.Series(importances, index=X.columns).sort_values(ascending=False)
fig2 = plt.figure(figsize=(12, 6))
sns.barplot(x=feature_importances.index, y=feature_importances.values, palette='viridis')
plt.title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
plt.xticks(rotation=45)
st.pyplot(fig2)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
st.sidebar.header("üîß –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:")
input_data = {
    'TotalCharges': st.sidebar.slider('–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', 0, 10000, 1000),
    'Tenure': st.sidebar.slider('–°—Ç–∞–∂ (–º–µ—Å—è—Ü—ã)', 1, 72, 12),
    'MonthlyCharges': st.sidebar.slider('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', 0, 200, 50),
}

input_df = pd.DataFrame(input_data, index=[0])
input_df[num_features] = scaler.transform(input_df[num_features])
input_prediction = clf.predict(input_df)
input_proba = clf.predict_proba(input_df)[:, 1]

if input_prediction == 1:
    st.success("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–π–¥–µ—Ç –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ (–æ—Ç—Ç–æ–∫).")
else:
    st.success("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏.")

st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {input_proba[0]:.2f}")
