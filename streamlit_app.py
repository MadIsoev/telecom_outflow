import streamlit as st
import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score, roc_auc_score
import numpy as np

st.set_page_config(page_title='–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', layout='wide')
st.title('üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
st.write('üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    data = pd.read_csv('telecom_users.csv')
    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
except Exception as e:
    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö
with st.expander('üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö'):
    st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (X)**")
    X_raw = data.drop(columns=["Churn"], errors='ignore')
    st.dataframe(X_raw)

    st.write("**–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (y)**")
    y_raw = data["Churn"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'Churn'
    if y_raw.isnull().sum() > 0:
        st.warning("‚ö†Ô∏è –í —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'Churn' –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ 'Churn' —Å –ø–æ–º–æ—â—å—é –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        data['Churn'] = data['Churn'].fillna(data['Churn'].mode()[0])  
        y_raw = data["Churn"]  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º y_raw –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'Churn' –≤ —Ç–∏–ø int –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    try:
        data['Churn'] = data['Churn'].astype(int)
        st.success("‚úÖ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'Churn' —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —Ç–∏–ø int.")
    except Exception as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 'Churn' –≤ —Ç–∏–ø int: {e}")
    
    st.dataframe(y_raw)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
imputer = SimpleImputer(strategy="mean")
X = pd.DataFrame(imputer.fit_transform(X_raw), columns=X_raw.columns)
y = data["Churn"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
clf = CatBoostClassifier(iterations=500, depth=6, learning_rate=0.1, verbose=0)
clf.fit(X_train, y_train)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
input_df_aligned = pd.DataFrame(columns=X_raw.columns)
input_df_aligned = pd.concat([input_df_aligned, input_df], ignore_index=True).fillna(0)
df_input_scaled = pd.DataFrame(scaler.transform(input_df_aligned), columns=X_raw.columns)

prediction = clf.predict(df_input_scaled)
prediction_proba = clf.predict_proba(df_input_scaled)

df_prediction_proba = pd.DataFrame(prediction_proba, columns=['–ù–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è', '–û—Å—Ç–∞–Ω–µ—Ç—Å—è'])

# –í—ã–≤–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
st.subheader('üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏')
st.dataframe(df_prediction_proba, hide_index=True)

status = np.array(['–ù–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è', '–û—Å—Ç–∞–Ω–µ—Ç—Å—è'])
st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: **{status[prediction][0]}**")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Å–µ—è–Ω–∏—è
fig1 = px.scatter(data, x='age', y='TotalCharges', color='Churn', title='–í–æ–∑—Ä–∞—Å—Ç vs. –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã')
st.plotly_chart(fig1)

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
fig2 = px.histogram(data, x='age', nbins=30, title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞')
st.plotly_chart(fig2)

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
st.subheader("üîé –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
fig, ax = plt.subplots()

data_numeric = data.select_dtypes(include=['float64', 'int64'])
sns.heatmap(data_numeric.corr(), annot=True, cmap='coolwarm', fmt='.2f', ax=ax)
st.pyplot(fig)

st.write("üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–∑—É–Ω–∫–∏ –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞!")
